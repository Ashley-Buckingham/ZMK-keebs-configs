#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// layers
// keys

#define HYPER LS(LC(LA(LGUI)))

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    macros {
        vscode_terminal: vscode_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(GRAVE))>;
            label = "VSCODE_TERMINAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp E                    &kp R             &kp T          &kp Y        &kp U              &kp I              &kp O    &kp P     &kp BACKSPACE
&mt LCTRL TAB     &kp A  &kp S  &kp D                    &kp F             &kp G          &kp H        &kp J              &kp K              &kp L    &kp SEMI  &kp ENTER
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C                    &kp V             &kp B          &kp N        &kp M              &kp COMMA          &kp DOT  &kp FSLH  &kp RSHFT
                                &mt C_PLAY_PAUSE C_MUTE  &lt 2 LEFT_SHIFT  &lt 1 SPACE    &lt 1 SPACE  &lt 2 RIGHT_SHIFT  &mt C_STOP C_STOP
            >;

            sensor-bindings =
                <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>,
                <&inc_dec_kp C_NEXT C_PREVIOUS>;
        };

        Settings {
            bindings = <
&kp TAB          &kp N1           &kp N2           &kp N3           &kp N4           &kp N5    &kp N6    &kp N7    &kp N8  &kp N9     &kp N0  &kp BSPC
&trans           &trans           &trans           &trans           &trans           &trans    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans  &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRD  &trans    &trans    &trans    &trans  &trans     &trans  &trans
                                                   &trans           &trans           &trans    &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        Code {
            bindings = <
&none           &kp LS(N1)        &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp RS(N6)  &kp RS(N7)  &kp RS(N8)  &kp RS(N9)  &kp RS(N0)  &kp BSPC
&none           &none             &none       &none       &none       &none         &none       &kp BSLH    &kp SQT     &kp SQT     &kp SEMI    &kp RET
&kp LEFT_SHIFT  &vscode_terminal  &none       &none       &none       &none         &kp LBKT    &kp RBKT    &kp COMMA   &kp DOT     &kp FSLH    &none
                                              &none       &none       &none         &none       &none       &none
            >;
        };
    };
};

// template
//  ┌──┬──┬──┬──┬──┬──┐      ┌──┬──┬──┬──┬──┬──┐
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  └──┴──┴──┴─┬┴─┬┴─┬┴─┐   ┌┴─┬┴─┬┴─┬┴──┴──┴──┘
//             │  │  │  │   │  │  │  │
//             └──┴──┴──┘   └──┴──┴──┘
