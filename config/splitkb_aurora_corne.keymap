#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// layers
// keys

#define HYPER LS(LC(LA(LGUI)))

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    macros {
        vscode_terminal: vscode_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(GRAVE))>;
            label = "VSCODE_TERMINAL";
        };

        vscode_comment: vscode_comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(FSLH)>;
            label = "VSCODE_COMMENT";
        };
    };

    behaviors {
            ht: hold_tap {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_TAP";
                #binding-cells = <2>;
                tapping-term-ms = <200>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
            lh_hm: left_hand_homerow_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "LEFT_HAND_HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <150>;
                flavor = "balanced";
                hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
                hold-trigger-on-release;
                bindings = <&kp>, <&kp>;
            };  
            rh_hm: right_hand_homerow_mods {    
                compatible = "zmk,behavior-hold-tap";
                label = "RIGHT_HAND_HOMEROW_MODS";
                #binding-cells = <2>;
                tapping-term-ms = <300>;
                quick-tap-ms = <150>;
                global-quick-tap;
                flavor = "balanced";
                hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
                hold-trigger-on-release;
                bindings = <&kp>, <&kp>;
                
            };
            excumflex: excumflex {
                compatible = "zmk,behavior-mod-morph";
                label = "EXCUMFLEX";
                #binding-cells = <0>;
                bindings = <&kp FR_CIRC>, <&kp FR_EXLM>;
                mods = <(MOD_LSFT)>;
            };
            virgpts: virgpts {
                compatible = "zmk,behavior-mod-morph";
                label = "VIRGPTS";
                #binding-cells = <0>;
                bindings = <&kp FR_COMM>, <&kp FR_SCLN>;
                mods = <(MOD_LSFT)>;
            };
            points: points {
                compatible = "zmk,behavior-mod-morph";
                label = "POINTS";
                #binding-cells = <0>;
                bindings = <&kp FR_DOT>, <&kp FR_COLN>;
                mods = <(MOD_LSFT)>;
            };
            questionstrophe: questionstrophe {
                compatible = "zmk,behavior-mod-morph";
                label = "QUESTIONSTROPHE";
                #binding-cells = <0>;
                bindings = <&kp FR_QUOT>, <&kp FR_QUES>;
                mods = <(MOD_LSFT)>;
            };
        };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp ESCAPE      &mt NUMBER_1 Q  &mt NUMBER_2 W  &mt NUMBER_3 E           &mt NUMBER_4 R  &mt NUMBER_5 T    &mt NUMBER_6 Y  &mt NUMBER_7 U   &mt NUMBER_8 I     &mt NUMBER_9 O  &mt NUMBER_0 P  &kp BACKSPACE
&mt LCTRL TAB   &kp A           &kp S           &kp D                    &kp F           &kp G             &kp H           &kp J            &kp K              &kp L           &kp SEMI        &kp ENTER
&kp LEFT_SHIFT  &kp Z           &kp X           &kp C                    &kp V           &kp B             &kp N           &kp M            &kp COMMA          &kp DOT         &kp FSLH        &kp RSHFT
                                                &mt C_PLAY_PAUSE C_MUTE  &lt 2 LGUI      &lt 1 SPACE       &lt 3 SPACE     &lt 2 RIGHT_GUI  &mt C_STOP C_STOP
            >;

            sensor-bindings =
                <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>,
                <&inc_dec_kp C_NEXT C_PREVIOUS>;
        };

        Settings {
            bindings = <
&kp TAB           &none            &kp UP_ARROW     &none            &none            &none    &none  &none  &none  &none  &none  &kp BSPC
&kp LEFT_CONTROL  &kp LEFT         &kp DOWN_ARROW   &kp RIGHT        &none            &none    &none  &none  &none  &none  &none  &none
&rgb_ug RGB_TOG   &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRD  &none    &none  &none  &none  &none  &none  &none
                                                    &none            &none            &none    &none  &none  &none
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        Code {
            bindings = <
&none           &kp LS(N1)        &kp LS(N2)       &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp RS(N6)  &kp RS(N7)  &kp RS(N8)  &kp RS(N9)  &kp RS(N0)  &kp BSPC
&none           &none             &none            &none       &none       &none         &none       &kp BSLH    &kp SQT     &kp SQT     &kp SEMI    &kp RET
&kp LEFT_SHIFT  &vscode_terminal  &vscode_comment  &none       &none       &none         &kp LBKT    &kp RBKT    &kp COMMA   &kp DOT     &kp FSLH    &none
                                                   &none       &none       &none         &none       &none       &none
            >;
        };

        OS_shit {
            bindings = <
&sys_reset  &kp C_AL_LOCK  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none       &none          &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none       &none          &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                                  &none  &none  &none    &none  &none  &none
            >;

            label = "OS shit";
        };
    };
};

// template
//  ┌──┬──┬──┬──┬──┬──┐      ┌──┬──┬──┬──┬──┬──┐
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  └──┴──┴──┴─┬┴─┬┴─┬┴─┐   ┌┴─┬┴─┬┴─┬┴──┴──┴──┘
//             │  │  │  │   │  │  │  │
//             └──┴──┴──┘   └──┴──┴──┘
