#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// layers
// keys

#define HYPER LS(LC(LA(LGUI)))

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
    };

    macros {
        vscode_terminal: vscode_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(GRAVE))>;
            label = "VSCODE_TERMINAL";
        };

        MACOS_screenlock: MACOS_screenlock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MACOS_SCREENLOCK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp ESCAPE      &mt NUMBER_1 Q  &mt NUMBER_2 W  &mt NUMBER_3 E           &mt NUMBER_4 R  &mt NUMBER_5 T    &mt NUMBER_6 Y  &mt NUMBER_7 U   &mt NUMBER_8 I     &mt NUMBER_9 O  &mt NUMBER_0 P  &kp BACKSPACE
&mt LCTRL TAB   &kp A           &kp S           &kp D                    &kp F           &kp G             &kp H           &kp J            &kp K              &kp L           &kp SEMI        &kp ENTER
&kp LEFT_SHIFT  &kp Z           &kp X           &kp C                    &kp V           &kp B             &kp N           &kp M            &kp COMMA          &kp DOT         &kp FSLH        &kp RSHFT
                                                &mt C_PLAY_PAUSE C_MUTE  &lt 2 LGUI      &lt 1 SPACE       &lt 1 SPACE     &lt 2 RIGHT_GUI  &mt C_STOP C_STOP
            >;

            sensor-bindings =
                <&inc_dec_kp K_VOLUME_UP K_VOLUME_DOWN>,
                <&inc_dec_kp C_NEXT C_PREVIOUS>;
        };

        Settings {
            bindings = <
&kp TAB          &none            &kp UP_ARROW     &none            &none            &none     &none   &none   &none           &mmv MOVE_UP    &mwh SCROLL_UP    &kp BSPC
&trans           &kp LEFT         &kp DOWN_ARROW   &kp RIGHT        &none            &none     &none   &none   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &trans
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &rgb_ug RGB_BRD  &rgb_ug RGB_BRD  &trans    &trans  &trans  &trans          &trans          &mwh SCROLL_DOWN  &trans
                                                   &trans           &trans           &trans    &trans  &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        Code {
            bindings = <
&none           &kp LS(N1)        &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp RS(N6)  &kp RS(N7)  &kp RS(N8)  &kp RS(N9)  &kp RS(N0)  &kp BSPC
&none           &none             &none       &none       &none       &none         &none       &kp BSLH    &kp SQT     &kp SQT     &kp SEMI    &kp RET
&kp LEFT_SHIFT  &vscode_terminal  &none       &none       &none       &none         &kp LBKT    &kp RBKT    &kp COMMA   &kp DOT     &kp FSLH    &none
                                              &none       &none       &none         &none       &none       &none
            >;
        };

        OS_shit {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;

            label = "OS shit";
        };
    };
};

// template
//  ┌──┬──┬──┬──┬──┬──┐      ┌──┬──┬──┬──┬──┬──┐
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  ├──┼──┼──┼──┼──┼──┤      ├──┼──┼──┼──┼──┼──┤
//  │  │  │  │  │  │  │      │  │  │  │  │  │  │
//  └──┴──┴──┴─┬┴─┬┴─┬┴─┐   ┌┴─┬┴─┬┴─┬┴──┴──┴──┘
//             │  │  │  │   │  │  │  │
//             └──┴──┴──┘   └──┴──┴──┘
